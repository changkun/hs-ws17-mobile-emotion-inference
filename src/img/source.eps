%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 513.000000 450.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.1 (Build 17B1003) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 513 450
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 513 450
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /e put
dup 39 /space put
dup 40 /p put
dup 41 /h put
dup 42 /n put
dup 43 /C put
dup 44 /a put
dup 45 /m put
dup 46 /r put
dup 47 /c put
dup 48 /T put
dup 49 /u put
dup 50 /S put
dup 51 /t put
dup 52 /s put
dup 53 /A put
dup 54 /x put
dup 55 /G put
dup 56 /P put
dup 57 /F put
dup 58 /I put
dup 59 /g put
dup 60 /D put
dup 61 /U put
dup 62 /hyphen put
dup 63 /d put
dup 64 /E put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 34 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/A 3 def
/C 4 def
/D 5 def
/E 6 def
/F 7 def
/G 8 def
/I 9 def
/M 10 def
/P 11 def
/S 12 def
/T 13 def
/U 14 def
/a 15 def
/b 16 def
/c 17 def
/d 18 def
/e 19 def
/g 20 def
/h 21 def
/i 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/x 32 def
/uni2B91 33 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9315F0017FC3864FF8D40C74661F4AC4F359AB40455CCBD4B88F0CECF0FBBCE3D81E443BF2B3BDABA64DE646528D274216E141CC2BD3049E9F7D1A996BC56CAFBBBB18F69063033C6B97D9FB89E146ACD1A18BD717F52681A976D83447D96DD3627801822CD048F3284DD5D0EC48F06CB75FD52DE9C09F67D9D0AA73EC5B1370EC0B3A342F469440B82FE664C3A9A0ED1C5B64D1F0F7022C261F42F21AA62E213024730759FA8760134C33062024E65178623A7F263A8604F0415204EEF3BA75BEBFD56960D1FD32AD72E4ED8A3933EF32DEEF441216BB7D58D1F4DF5014D0B8D5B3ED37070F82DAFB91F27C88DE1151CFE56B3E6B0CFEA54EF66E10014A67C4297B5E191CB6C2B01848FE2E87A6F1D613623DC0EFD325080FE9BAC0C54F1EC38980F4D1DF5AF19FFD1418166F078831B3B2382A9ACD00867B80B068FB210E825DF62D027B8F42DAC77692D9103CE6A6A45710FA0AC8E7159BF5A9C75A93DCFFFF69011DD711D5CDE9FC949EBA5BC48E6CEE5878367CCE845FC0FB2653EE8DAED60143F34A6B843B50E0913374799942DE40BFCFB55D79584BCB83D5C5BDB524337A59143A950ECD050F65E95BAD04CBC51ECB165764754C07CFDD95344113729E2D994F5E4C185C15BA84D0BD644347E656AD8EDCABAF94647A810F1629254730335F72588F9B82BEE795E7A270B1A05B248327E5200C0716A11DBF6393F3A83693E84BE3204010ACD6ECE903745799F886627F6CEFAB9360E900027DC12C9847

F6F33AC7225923A8C8E2F8E23CEAC67FF32E1F3CB53270AF3813AE29D1471F0F206011F43741B1A1D17ED6B33262A1DB623E68C07D5C65704E05227D10679C01CAB0EB36252561F4F35F1BA332ADFF488011DEDCF8918F157FA831876D05241E4972AF2FA942A1D79E1FA502DC4A099F94465CF15E55CBD18B231905026F082229FC1A0050AF21A08698772D5C0DF876AD1653538F970EE759057A5378C23E0F954CFF5FE61D1F9E4F2CE29BCDCBEAF20B422D1700A50D4B64E1D65ED0325919937C5F29C785026D3B4C9022964AE3BE2D121182C0312DD1BFF8FA490ABCA846F369813EE08EFADCC3744C641266C23314FEA3FA2D13BDF386AA8992DB5C7EBB4FA1237C4EEE15D91A323AA7964FA8F7A58501DFEEABF01607671463DAE256F0726E2077B0D531A5360883B314B48700ECD3251DB7336C75DB60A8E6B4BF656A726FAEBDDC94189768383A388E652C1580CF83F316533FB0C47AD53CBAD8F35046F88C5DBE06A5E1ABE16852897C112EB5BD2754E28BF40A425DBEB00504D20A1298BB5D12D38879CE88768E83B97C0A2FDD750F7F0D1A5A4E61408BDBA530B1D80D5EFB6CBC40146E485BB50FD180073A9C162DFFFB26313AB537ACF8455C3C24503BF89E4FE63D31827D8B5C4BF85465D065FB4CA980AE76472E288BF68A30779FFA9DBA5DC8640F8422AE8D456A966197FD90FD934A09347835DF8D54D4211B5337EBCF9B98E2D68BDF3A39DD031C6F6E685B68668E24E58C43DAE8351F9E2BD3BE6DC42E5BA98EC7631B377BAB91590A3C2100908A3CDDB3EADD8060F4E02E99104D6961618508B6929B628DE29FC6CBF1A43DF56D309F62DC946035618B0E86E56A9533662CA7CDA873B5CB588697C142FCE9DAD8569C1429FC9A22A0FDE6A7D7AAE61213E101A6E6F5EEEF26FB39A53F30816D0B83894E3B749CBF6BB22BDD4C5EB53D4B8780362DB512FE1CCCF6620CDD7A7D49CAAE4CE5BE0BBE1178258A1265856960818C4358A9E83D685F199EC6D2DD660FC0CD99A01B33576E053EAE8E9086CCA6E286DC29591816DFF467459F542290C8FDE44270CEFB37D87CA3843722813F46EDAF547FB835CA57DE28A9F1EB750918524A51800AD9DED13B8695166F357FC6B2C90C53CF162DB689A255B9C06B36673115A0B8DDE85077E82556D892C022447D5CE336E8FB232ED668D2B50EB23315CA2A09EFEFFC5CFA877C47D033AA8C7B46D41C757CBC2E7A60777E631FB77AB617A3F2C4B302CE4C7F204BA43DD23A98106FA9D331D236822029F69DCF459322D62FAF4673A955C0E43833664BFB743C2D348071C39A4B25B6BFB4A4A18F809D24EF39D61F925B0ADEAB3F858E15880115240F41498C17CAEB55E80422F5DDA52D36F8726C0C749B6FC31E77C22B9EABCF5E8276A8329E91D9FE7303F4D3313F39865CB1DBFB1B1FF9

D22F00EC7A90E4766F8C2B6FAB97BF546C3BA9C05A454580260023955CE9DB28BC7326A8FBB826165B09C5E1A3F0A5CF57C006C4DCB28F65BDA02B6F58E17289441FCD4E68ADE5AA9162D53075578DD0C08ED6C87099A75EF1C95EE13CD998101345535C88846A7F478561357478AC4E1886193576B2224F601A284B714CF829541209CF700D0A5174EE0B927EEB4CAC60C3125D209BC2585B158F627E754A24C7029920AFE34C22FF04A33DC4394D5B171B18AE5BDD8B84510B4ABFAA9C25771D99264687B049796D443A2E758D4CE2C822DC558D5421FD840E3B647364A1A5BBFA980797D9DA9EB43E5FA0FF5779DF8138BA304DB6C672AA5F28ADD347119509FC34645616201C4F99549D26AA981AABD27C9246BE1B992D0553C6A5950C7CD927A3E36494721DC9B822B3EFCCB70116B5942A41EA472E1CE3E1B94C2CF8B0E7DB397D059B3DED21DA1CE4E2BBE911D48B00E14162E196047985E1D08784F70DC0D2AFD5EFA13A05DA9D2D50BBEFEAD021E932407816B6005EA4A26DDC5616E517CBA890CECD225BBADFA11EE95A2601DB4AAB1A3061B06722E0A96EEE9458602C8B4548D1EC700D821C7B5051D31474CF1C43F5DE30A869C74FB754338AB319E5EDF00473CC79493285FB77021CF7AAA408114547C38225BFD7987D12AB0ACDCA906AC05328AF79B24E14C20799F9F7FEE1B35088DA2A279817FC106E0B236E0D281221F7D68CFA20CFC9769EFCCF6CBEE1126DCA03DFCB14351C138C2557798F36D6C86A6A896EF554A3E77B6BD7E5B1385938299A80A3A9BB78C9BEA81E37819F24E690ECF3B58118023E1A4ACF53973F5ADB6FDA68C339AF80F68FE002DC4B0A86F93622D824AC30A3B6D4777072C77C555B2C58C92F7CE24997A1C7BCBD238171266AE4F0EEDAB915AC4601A53FEA6A5A592B771E603997A836A6681C95762FE9EF02CA1BD86A6ABD80C669D87D0BE0941054945767DC6A0302B80592CC16CAFA8E18104EAB26DC5F6CE867F211C9D1D151BC5C166371163E958E57BC1FF57F1FCD8051C039EA9CABCD246138B43FF7CA324F50B4BFCB4632A676E9E25EC06ECFA709E20E4D32E3213835AFFD43B9C4919CDA55348760AB61B4EAB70617C084AA07FBBDD631A18FAA1A04EA0EE2E21B8A1C5E79694894D09753F56802D4A441C13EF5610336C53F4DEA585A58BE9A74A93BFB2E3C86B622B68BBA871C1231D9B227AC75F8CB8798A11F75214543A55B4FED8D6A07B371C4592033B3F149FCF829347E9F38EDB840044C9ABD321BB6DEDF8D5F24FA3533958AC3A3874CCFF42DD6DFB8CD7848CB00D0A4CE94D9A1B6E024B2E484887B2FC5769400D32B6A2507EC25DC20E0217CBB619B954817D51E82BB19C49F0E92C029474D88F587C342C9563A3272270CF5CB26A88371F9BE81D6AD39B92DAC942A0E41FD365333

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 513 450 rc
0 450 m
899 450 l
899 -270 l
0 -270 l
h
0 450 m
f
9 441 m
180 441 l
180 72 l
9 72 l
h
9 441 m
f
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
9 9 m
180 9 l
180 378 l
9 378 l
h
9 9 m
S
0.42745 0.31373 0 sc
0 i
1 0 0 -1 94.5 256.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-48.903999 176.552 m
(!"#$%&'\(\)"*&)[ 13.936000 9.184000 9.488000 3.552000 3.552000 8.592000 4.448000 9.488000 8.896000 9.184000 8.896000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 423 m
162 423 l
162 378 l
27 378 l
h
27 423 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 27 m
162 27 l
162 72 l
27 72 l
h
27 27 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 400.5 cm
-28.152 5.776001 m
(+,-&.,)[ 11.552000 8.592000 13.648000 8.592000 5.328000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 369 m
162 369 l
162 324 l
27 324 l
h
27 369 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 81 m
162 81 l
162 126 l
27 126 l
h
27 81 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 346.5 cm
-42.68 5.776001 m
(!$/."\(\)"*&)[ 13.936000 3.552000 8.592000 5.040000 9.184000 9.488000 8.896000 9.184000 8.896000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 315 m
162 315 l
162 270 l
27 270 l
h
27 315 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 135 m
162 135 l
162 180 l
27 180 l
h
27 135 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 292.5 cm
-48.751999 5.776001 m
(0"1/\)'2/.&&*)[ 7.408000 9.184000 8.896000 8.592000 8.896000 4.448000 10.368000 8.592000 5.040000 8.592000 8.592000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 261 m
162 261 l
162 216 l
27 216 l
h
27 261 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 189 m
162 189 l
162 234 l
27 234 l
h
27 189 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 238.5 cm
-56.304001 5.776001 m
(!"3$"*'2&*4".4)[ 13.936000 9.184000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 8.592000 8.896000 8.000000 9.184000 5.328000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 207 m
162 207 l
162 162 l
27 162 l
h
27 207 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 243 m
162 243 l
162 288 l
27 288 l
h
27 243 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 184.5 cm
-40.152 -3.447998 m
(5\(\(%$/,3$"*')[ 10.368000 9.488000 9.488000 3.552000 3.552000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-28.296 15 m
(+"*3&63)[ 11.552000 9.184000 8.896000 5.040000 8.592000 8.288000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 153 m
162 153 l
162 108 l
27 108 l
h
27 153 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 297 m
162 297 l
162 342 l
27 342 l
h
27 297 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 130.5 cm
-16.440001 5.776001 m
(782)[ 12.144000 10.368000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 423 m
333 423 l
333 378 l
198 378 l
h
198 423 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 27 m
333 27 l
333 72 l
198 72 l
h
198 27 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 400.5 cm
-45.335999 5.776001 m
(9,/$,%':-,;&)[ 9.184000 8.592000 8.592000 3.552000 8.592000 3.552000 4.448000 4.144000 13.648000 8.592000 9.184000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 360 m
333 360 l
333 315 l
198 315 l
h
198 360 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 90 m
333 90 l
333 135 l
198 135 l
h
198 90 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 337.5 cm
-44.152 5.776001 m
(2\(&&/\)'0&63)[ 10.368000 9.488000 8.592000 8.592000 8.592000 8.896000 4.448000 7.408000 8.592000 8.288000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 297 m
333 297 l
333 252 l
198 252 l
h
198 297 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 153 m
333 153 l
333 198 l
198 198 l
h
198 153 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 274.5 cm
-37.928001 -3.447998 m
(:*3&.,/3$"*')[ 4.144000 8.896000 5.040000 8.592000 5.328000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-24.296 15 m
(<&3,$%4)[ 11.264000 8.592000 5.040000 8.592000 3.552000 3.552000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 234 m
333 234 l
333 189 l
198 189 l
h
198 234 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 216 m
333 216 l
333 261 l
198 261 l
h
198 216 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 211.5 cm
-38.368 5.776001 m
(=:'+"*3&63)[ 11.552000 4.144000 4.448000 11.552000 9.184000 8.896000 5.040000 8.592000 8.288000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 171 m
333 171 l
333 126 l
198 126 l
h
198 171 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 279 m
333 279 l
333 324 l
198 324 l
h
198 279 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 148.5 cm
-46.368 5.776001 m
(7&">%"/,3$"*)[ 12.144000 8.592000 9.184000 6.224000 3.552000 9.184000 8.592000 8.592000 5.040000 3.552000 9.184000 0.000000 ] xS
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
162 49.5 m
188.10001 49.5 l
S
0 i
CM
196.10001 400.5 m
188.10001 403.5 l
188.10001 397.5 l
h
196.10001 400.5 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.10001 49.5 m
188.10001 46.5 l
188.10001 52.5 l
h
196.10001 49.5 m
S
1 J
1 j
0.60000002 i
162 107.05264 m
188.11368 108.42703 l
S
0 i
CM
196.10263 341.1525 m
188.27136 344.56882 l
187.95601 338.57712 l
h
196.10263 341.1525 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.10263 108.8475 m
188.27136 105.43118 l
187.95601 111.42289 l
h
196.10263 108.8475 m
S
1 J
1 j
0.60000002 i
162 164.60527 m
188.15439 167.35835 l
S
0 i
CM
196.11044 281.80417 m
188.46844 285.62515 l
187.84035 279.65811 l
h
196.11044 281.80417 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.11044 168.19583 m
188.46844 164.37485 l
187.84035 170.34187 l
h
196.11044 168.19583 m
S
1 J
1 j
0.60000002 i
162 197.28947 m
188.31236 191.75003 l
S
0 i
CM
196.14076 259.89804 m
187.69432 261.18561 l
188.93039 255.31432 l
h
196.14076 259.89804 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.14076 190.10194 m
187.69432 188.81438 l
188.93039 194.68568 l
h
196.14076 190.10194 m
S
1 J
1 j
0.60000002 i
162 254.8421 m
188.22115 250.70192 l
S
0 i
CM
196.12325 200.54578 m
187.75327 202.26137 l
188.68904 196.33479 l
h
196.12325 200.54578 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.12325 249.45422 m
187.75327 247.73863 l
188.68904 253.66521 l
h
196.12325 249.45422 m
S
1 J
1 j
0.60000002 i
162 312.39474 m
188.15439 309.64163 l
S
0 i
CM
196.11044 141.19583 m
187.84035 143.34187 l
188.46844 137.37485 l
h
196.11044 141.19583 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.11044 308.80417 m
187.84035 306.65811 l
188.46844 312.62515 l
h
196.11044 308.80417 m
S
0 0 0 sc
CM
360 423 m
441 423 l
441 126 l
360 126 l
h
360 423 m
f
1 J
1 j
0.60000002 i
1 0 0 -1 0 450 cm
360 27 m
441 27 l
441 324 l
360 324 l
h
360 27 m
S
1 1 1 sc
0 i
1 0 0 -1 400.5 274.5 cm
-26.375999 5.776001 m
(!"?&%4)[ 13.936000 9.184000 9.488000 8.592000 3.552000 0.000000 ] xS
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
333 49.934464 m
350.10022 50.044529 l
S
0 i
CM
358.10004 399.90399 m
350.11951 402.95541 l
350.0809 396.95554 l
h
358.10004 399.90399 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10004 50.09602 m
350.11951 47.04459 l
350.0809 53.044464 l
h
358.10004 50.09602 m
S
1 J
1 j
0.60000002 i
333 112.4242 m
350.10001 112.405 l
S
0 i
CM
358.10001 337.60397 m
350.09665 340.595 l
350.10336 334.595 l
h
358.10001 337.60397 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10001 112.39602 m
350.09665 109.405 l
350.10336 115.405 l
h
358.10001 112.39602 m
S
1 J
1 j
0.60000002 i
333 175.5 m
350.10001 175.5 l
S
0 i
CM
358.10001 274.5 m
350.10001 277.5 l
350.10001 271.5 l
h
358.10001 274.5 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10001 175.5 m
350.10001 172.5 l
350.10001 178.5 l
h
358.10001 175.5 m
S
1 J
1 j
0.60000002 i
333 238.09386 m
350.10019 237.99097 l
S
0 i
CM
358.10004 212.05717 m
350.08212 215.00899 l
350.11823 209.00909 l
h
358.10004 212.05717 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10004 237.94283 m
350.08212 234.99101 l
350.11823 240.99091 l
h
358.10004 237.94283 m
S
1 J
1 j
0.60000002 i
333 302.10596 m
350.1004 302.25946 l
S
0 i
CM
358.10007 147.66872 m
350.12732 150.74042 l
350.07346 144.74066 l
h
358.10007 147.66872 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10007 302.33127 m
350.12732 299.25958 l
350.07346 305.25934 l
h
358.10007 302.33127 m
S
0.94901961 0.3764706 0.46666667 sc
CM
198 108 m
441 108 l
441 72 l
198 72 l
h
198 108 m
f
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
198 342 m
441 342 l
441 378 l
198 378 l
h
198 342 m
S
1 1 1 sc
0 i
1 0 0 -1 319.5 90 cm
-69.639999 5.776001 m
(=4&.'@-"3$"*'23,3&)[ 11.552000 8.000000 8.592000 5.328000 4.448000 9.776000 13.648000 9.184000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 5.040000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
401.5538 324 m
401.61127 332.10025 l
S
0 i
CM
401.66806 109.89996 m
404.61121 117.92104 l
398.61136 117.87846 l
h
401.66806 109.89996 m
f
0 J
0 j
1 0 0 -1 0 450 cm
401.66806 340.10004 m
404.61121 332.07895 l
398.61136 332.12155 l
h
401.66806 340.10004 m
S
ep
end
%%Trailer
%%EOF
