%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 513.000000 450.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.13.1 (Build 17B1003) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 513 450
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 513 450
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /o put
dup 35 /b put
dup 36 /i put
dup 37 /l put
dup 38 /e put
dup 39 /space put
dup 40 /p put
dup 41 /h put
dup 42 /n put
dup 43 /C put
dup 44 /a put
dup 45 /m put
dup 46 /r put
dup 47 /c put
dup 48 /T put
dup 49 /u put
dup 50 /S put
dup 51 /t put
dup 52 /s put
dup 53 /A put
dup 54 /x put
dup 55 /G put
dup 56 /P put
dup 57 /F put
dup 58 /I put
dup 59 /g put
dup 60 /D put
dup 61 /d put
dup 62 /U put
dup 63 /E put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<








00>] def
/CharStrings 33 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/D 4 def
/E 5 def
/F 6 def
/G 7 def
/I 8 def
/M 9 def
/P 10 def
/S 11 def
/T 12 def
/U 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/g 19 def
/h 20 def
/i 21 def
/l 22 def
/m 23 def
/n 24 def
/o 25 def
/p 26 def
/r 27 def
/s 28 def
/t 29 def
/u 30 def
/x 31 def
/uni2B91 32 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec





F4F0B220E00595A9A5F5528FD958FD8BE8A4544343CF051C86A2FB4B5ECC8DC30112580B9C49BBDD25235EC45093F5C2B3CB70D2641AC87C7E3F184F16DCC6A016AD81D8B6AAD84FBFC1FED360A55B319AD567907B053518E1C5B1A6272ECAD332DF4B7C8941817A1CB77AC0815E37D9F38D3FE3DFD8655FEC8420BB0A759E1206D4BA20F737E241B966431D95D16B0176793960D24E2537E1C667C2392DEE476528FD799408622BBF6CCB6F64D038A3396BF01F8499F49EE42E279DEA9A8B62614BB4E24FA9B3283F117876EC31680D07CB6AA1D44DD08450754C5F96D29D57F9CF8B48B8EEE4A73E961A7F4D77F19CD59623134E401ED3F37437CF2414AD36C2BE75329438D1B6FCACAA9F403D6C2566DCF8DB5E81E4091AA7B40568F28492E5424E61DC62A7CB3F8118CA7CE5F247E552E03DC192A386FD4BAC2C536AE5BE25415FDD4BB0519F405BD855ABE27C118AC7556F77D4DA598BC48648FC38EDEA66C82CD24E47550566A3682706826EA020DDEE58D159C2896D08241E47311BA75562CE1594DD632C625911268B37598FC038F872BC7A718663E55AE50FE3A2C7D468D15383C7B28CEE9860E6BD26EBE75DE58B832D769820180CF113B894281BAB6779C47128113F328A40090F91A6FAC708587E0AC26D9C2BC0B6773FB80FEC2F0C02B730D91F807C047B26C1478092C052C8739AD84A583A15B5110E218A5EA9499C4D5ECC8EFC54E40D4B576A7B416EC30ADD5347AAA2EDF657786D03A0535034EE1F647DC1D8A7F486AA1052355C830C94BCEC8CDBC68297EDB17D5C5E0D2AB8FD0EEE043BE1646759F9C70A10E9812482D5225C12FA0B62FD131A146DD1B1D6B966D2246BF3886415F39272D179B87AE1BE3160C8EE1F50E474D71C5E4C14264E91E9E868F2CDFB66DACAB5220EB48F39B9EFAFA65EB387347D77AF2452F705620176FF1E5C0C631F3F2CC6DBD9352A0FFFA3EB09AB5F412347A5DEEF71A6CF1E6AA026F6729E2CD29BD448BFFA4D0C7CB5C6238D2E00C5DAF97BE8DE4D28FECAE7529274A9AC00E6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 513 450 rc
0 450 m
899 450 l
899 -270 l
0 -270 l
h
0 450 m
f
9 441 m
180 441 l
180 72 l
9 72 l
h
9 441 m
f
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
9 9 m
180 9 l
180 378 l
9 378 l
h
9 9 m
S
0.42745 0.31373 0 sc
0 i
1 0 0 -1 94.5 256.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-48.903999 176.552 m
(!"#$%&'\(\)"*&)[ 13.936000 9.184000 9.488000 3.552000 3.552000 8.592000 4.448000 9.488000 8.896000 9.184000 8.896000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 423 m
162 423 l
162 378 l
27 378 l
h
27 423 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 27 m
162 27 l
162 72 l
27 72 l
h
27 27 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 400.5 cm
-28.152 5.776001 m
(+,-&.,)[ 11.552000 8.592000 13.648000 8.592000 5.328000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 369 m
162 369 l
162 324 l
27 324 l
h
27 369 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 81 m
162 81 l
162 126 l
27 126 l
h
27 81 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 346.5 cm
-42.68 5.776001 m
(!$/."\(\)"*&)[ 13.936000 3.552000 8.592000 5.040000 9.184000 9.488000 8.896000 9.184000 8.896000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 315 m
162 315 l
162 270 l
27 270 l
h
27 315 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 135 m
162 135 l
162 180 l
27 180 l
h
27 135 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 292.5 cm
-48.751999 5.776001 m
(0"1/\)'2/.&&*)[ 7.408000 9.184000 8.896000 8.592000 8.896000 4.448000 10.368000 8.592000 5.040000 8.592000 8.592000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 261 m
162 261 l
162 216 l
27 216 l
h
27 261 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 189 m
162 189 l
162 234 l
27 234 l
h
27 189 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 238.5 cm
-56.304001 5.776001 m
(!"3$"*'2&*4".4)[ 13.936000 9.184000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 8.592000 8.896000 8.000000 9.184000 5.328000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 207 m
162 207 l
162 162 l
27 162 l
h
27 207 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 243 m
162 243 l
162 288 l
27 288 l
h
27 243 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 184.5 cm
-40.152 -3.447998 m
(5\(\(%$/,3$"*')[ 10.368000 9.488000 9.488000 3.552000 3.552000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-28.296 15 m
(+"*3&63)[ 11.552000 9.184000 8.896000 5.040000 8.592000 8.288000 0.000000 ] xS
0.58823532 0.38431373 0.81568629 sc
CM
27 153 m
162 153 l
162 108 l
27 108 l
h
27 153 m
f
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
27 297 m
162 297 l
162 342 l
27 342 l
h
27 297 m
S
1 1 1 sc
0 i
1 0 0 -1 94.5 130.5 cm
-16.440001 5.776001 m
(782)[ 12.144000 10.368000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 423 m
333 423 l
333 378 l
198 378 l
h
198 423 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 27 m
333 27 l
333 72 l
198 72 l
h
198 27 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 400.5 cm
-45.335999 5.776001 m
(9,/$,%':-,;&)[ 9.184000 8.592000 8.592000 3.552000 8.592000 3.552000 4.448000 4.144000 13.648000 8.592000 9.184000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 360 m
333 360 l
333 315 l
198 315 l
h
198 360 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 90 m
333 90 l
333 135 l
198 135 l
h
198 90 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 337.5 cm
-44.152 5.776001 m
(2\(&&/\)'0&63)[ 10.368000 9.488000 8.592000 8.592000 8.592000 8.896000 4.448000 7.408000 8.592000 8.288000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 297 m
333 297 l
333 252 l
198 252 l
h
198 297 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 153 m
333 153 l
333 198 l
198 198 l
h
198 153 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 274.5 cm
-37.928001 -3.447998 m
(:*3&.,/3$"*')[ 4.144000 8.896000 5.040000 8.592000 5.328000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-24.296 15 m
(<&3,$%4)[ 11.264000 8.592000 5.040000 8.592000 3.552000 3.552000 0.000000 ] xS
1 0.56862748 0.3019608 sc
CM
198 180 m
333 180 l
333 135 l
198 135 l
h
198 180 m
f
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
198 270 m
333 270 l
333 315 l
198 315 l
h
198 270 m
S
1 1 1 sc
0 i
1 0 0 -1 265.5 157.5 cm
-37.928001 -3.447998 m
(:*3&.,/3$"*')[ 4.144000 8.896000 5.040000 8.592000 5.328000 8.592000 8.592000 5.040000 3.552000 9.184000 8.896000 0.000000 ] xS
-28.296 15 m
(+"*3&63)[ 11.552000 9.184000 8.896000 5.040000 8.592000 8.288000 0.000000 ] xS
0.60000002 i
0.19215687 0 0.40392157 sc
1 0 0 -1 0 450 cm
162 49.5 m
188.10001 49.5 l
S
0 i
CM
196.10001 400.5 m
188.10001 403.5 l
188.10001 397.5 l
h
196.10001 400.5 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.10001 49.5 m
188.10001 46.5 l
188.10001 52.5 l
h
196.10001 49.5 m
S
1 J
1 j
0.60000002 i
162 107.05264 m
188.11368 108.42703 l
S
0 i
CM
196.10263 341.1525 m
188.27136 344.56882 l
187.95601 338.57712 l
h
196.10263 341.1525 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.10263 108.8475 m
188.27136 105.43118 l
187.95601 111.42289 l
h
196.10263 108.8475 m
S
1 J
1 j
0.60000002 i
162 164.60527 m
188.15439 167.35835 l
S
0 i
CM
196.11044 281.80417 m
188.46844 285.62515 l
187.84035 279.65811 l
h
196.11044 281.80417 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.11044 168.19583 m
188.46844 164.37485 l
187.84035 170.34187 l
h
196.11044 168.19583 m
S
1 J
1 j
0.60000002 i
162 197.28947 m
188.31236 191.75003 l
S
0 i
CM
196.14076 259.89804 m
187.69432 261.18561 l
188.93039 255.31432 l
h
196.14076 259.89804 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.14076 190.10194 m
187.69432 188.81438 l
188.93039 194.68568 l
h
196.14076 190.10194 m
S
1 J
1 j
0.60000002 i
162 276.1579 m
188.22115 280.29807 l
S
0 i
CM
196.12325 168.45422 m
188.68904 172.66521 l
187.75327 166.73863 l
h
196.12325 168.45422 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.12325 281.54578 m
188.68904 277.33478 l
187.75327 283.26135 l
h
196.12325 281.54578 m
S
0 0 0 sc
CM
360 423 m
441 423 l
441 135 l
360 135 l
h
360 423 m
f
1 J
1 j
0.60000002 i
1 0 0 -1 0 450 cm
360 27 m
441 27 l
441 315 l
360 315 l
h
360 27 m
S
1 1 1 sc
0 i
1 0 0 -1 400.5 279 cm
-26.375999 5.776001 m
(!"=&%4)[ 13.936000 9.184000 9.488000 8.592000 3.552000 0.000000 ] xS
0.60000002 i
0.7019608 0.26666668 0 sc
1 0 0 -1 0 450 cm
333 49.434284 m
350.10001 49.417637 l
S
0 i
CM
358.10001 400.59015 m
350.09708 403.58237 l
350.10294 397.58237 l
h
358.10001 400.59015 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10001 49.409847 m
350.09708 46.417637 l
350.10294 52.417633 l
h
358.10001 49.409847 m
S
1 J
1 j
0.60000002 i
333 110.57585 m
350.10403 110.08829 l
S
0 i
CM
358.10077 340.13968 m
350.01852 342.91049 l
350.18951 336.91293 l
h
358.10077 340.13968 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10077 109.86033 m
350.01852 107.0895 l
350.18951 113.08707 l
h
358.10077 109.86033 m
S
1 J
1 j
0.60000002 i
333 173.25 m
350.1055 172.67981 l
S
0 i
CM
358.10104 277.5867 m
350.00555 280.31851 l
350.20544 274.32184 l
h
358.10104 277.5867 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10104 172.4133 m
350.00555 169.68149 l
350.20544 175.67815 l
h
358.10104 172.4133 m
S
1 J
1 j
0.60000002 i
333 293.57462 m
350.10126 293.84686 l
S
0 i
CM
358.10025 156.0258 m
350.14902 159.15276 l
350.0535 153.15352 l
h
358.10025 156.0258 m
f
0 J
0 j
1 0 0 -1 0 450 cm
358.10025 293.97421 m
350.14902 290.84723 l
350.0535 296.84647 l
h
358.10025 293.97421 m
S
0.94901961 0.3764706 0.46666667 sc
CM
198 108 m
441 108 l
441 72 l
198 72 l
h
198 108 m
f
1 J
1 j
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
198 342 m
441 342 l
441 378 l
198 378 l
h
198 342 m
S
1 1 1 sc
0 i
1 0 0 -1 319.5 90 cm
-69.639999 5.776001 m
(>4&.'?-"3$"*'23,3&)[ 11.552000 8.000000 8.592000 5.328000 4.448000 9.776000 13.648000 9.184000 5.040000 3.552000 9.184000 8.896000 4.448000 10.368000 5.040000 8.592000 5.040000 0.000000 ] xS
0.60000002 i
0.69411767 0 0.10980392 sc
1 0 0 -1 0 450 cm
401.49753 315 m
401.616 332.10025 l
S
0 i
CM
401.67142 109.89996 m
404.61594 117.92055 l
398.61606 117.87898 l
h
401.67142 109.89996 m
f
0 J
0 j
1 0 0 -1 0 450 cm
401.67142 340.10004 m
404.61594 332.07947 l
398.61606 332.12103 l
h
401.67142 340.10004 m
S
1 J
1 j
0.60000002 i
0 0 0 sc
162 308.8421 m
188.22115 304.70193 l
S
0 i
CM
196.12325 146.54578 m
187.75327 148.26137 l
188.68904 142.33479 l
h
196.12325 146.54578 m
f
0 J
0 j
1 0 0 -1 0 450 cm
196.12325 303.45422 m
187.75327 301.73865 l
188.68904 307.66522 l
h
196.12325 303.45422 m
S
ep
end
%%Trailer
%%EOF
